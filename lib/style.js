const { basename, relative, dirname } = require('path')
const { write } = require('./fs-promise')

const IMG_PLACEHOLDER = 'SPRITE.png'

/**
 * generate style
 * @param  {Array}   infoList                The images (merged to sprite) info list, generated by `generateSprite`
 * @param  {Object}  options                 options
           {String}         options.connector       className connector, default to "-"
           {String}         options.prefix          className prefix, default to "icon"
           {String}         options.suffix          className suffix
           {String}         options.eol             new line
           {Boolean}        options.retina          generate retina style
           {Boolean}        options.writeToFile     whether write style to file
           {String}         options.stylePath       style path
           {String}         options.imagePath       image path
           {String}         options.retinaImagePath retina image path
           {Boolean|String} options.banner          banner
 * @return {String}                          generated style text
 */
function generateStyle (infoList, {
    connector = '-',
    prefix = 'icon',
    suffix = '',
    eol,
    retina = false,
    writeToFile = false,
    stylePath,
    imagePath,
    retinaImagePath,
    banner = false
} = {}) {
    if (!infoList || !infoList.length) {
        return Promise.reject('invalid arguments')
    }

    // adjust options
    if (!imagePath) {
        imagePath = IMG_PLACEHOLDER
    } else {
        imagePath = stylePath ? relative(dirname(stylePath), imagePath) : imagePath
    }
    if (!retinaImagePath) {
        retinaImagePath = imagePath.replace(/(\.\w+)$/i, `@2x$1`)
    } else {
        retinaImagePath = stylePath ? relative(dirname(stylePath), retinaImagePath) : retinaImagePath
    }
    if (eol == null) {
        eol = require('os').EOL
    }
    if (typeof banner !== 'string') {
        banner = banner ? `/**${eol}* Created at ${new Date().toLocaleString()}.${eol}**/${eol}` : ''
    }

    // generate style
    const retinaBackgroundImage = retina ? `background-image: -webkit-image-set(url(${imagePath}) 1x, url(${retinaImagePath}) 2x);` : ''

    let style = `${banner}.${prefix} {${
        eol}    display: inline-block;${
        eol}    background-repeat: no-repeat;${
        eol}    background-image: url(${imagePath});${
        eol}`
    style += retinaBackgroundImage ? `    ${retinaBackgroundImage}${eol}}` : '}'
    infoList.forEach(({ x, y, width, height, margin, path }) => {
        let name = basename(path)
        let css = `.${prefix + connector + name.slice(0, name.lastIndexOf('.')) + (suffix ? connector + suffix : '')} {${
            eol}    background-position: ${-x - margin / 2}px ${-y - margin / 2}px;${
            eol}    width: ${width - margin}px;${
            eol}    height: ${height - margin}px;${
        eol}}`
        style += eol + css
    })

    return (writeToFile && stylePath)
        ? write(stylePath, style, { encoding: 'utf8' }, true).then(() => style)
        : Promise.resolve(style)
}

module.exports = generateStyle
